{"version":3,"sources":["component/TodoInput.js","component/TodoItem.js","component/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoInput","item","handelChange","handleSubmit","editItem","className","onSubmit","type","placeholder","onChange","value","TodoItem","handelDelete","handelEdit","useState","done","setDone","title","onClick","TodoList","list","clearList","map","id","key","App","state","setState","setList","useEffect","storedItem","JSON","parse","localStorage","getItem","setItem","stringify","e","target","preventDefault","trim","uuidv4","updatedList","filter","selectedItem","find","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qOAGe,SAASA,EAAT,GAAiE,IAA5CC,EAA2C,EAA3CA,KAAKC,EAAsC,EAAtCA,aAAaC,EAAyB,EAAzBA,aAAcC,EAAW,EAAXA,SAE5D,OACI,yBAAKC,UAAU,uBACX,0BAAMC,SAAUH,GACd,yBAAKE,UAAU,eACb,yBAAKA,UAAU,uBACX,yBAAKA,UAAU,sCACX,kBAAC,IAAD,QAGR,2BAAOE,KAAK,OAAOF,UAAU,eAC7BG,YAAY,gBAAgBC,SAAUP,EAAcQ,MAAQT,KAE7D,4BAAQM,KAAK,SAASF,UAAU,kCACzBD,EAAW,YAAc,c,mBCZpC,SAASO,EAAT,GAAuD,IAAnCV,EAAkC,EAAlCA,KAAMW,EAA4B,EAA5BA,aAAcC,EAAc,EAAdA,WAAc,EAC3CC,oBAAS,GADkC,mBAC5DC,EAD4D,KACtDC,EADsD,KAGnE,OACE,wBAAIX,UAAU,uEACZ,wBAAIA,UAAWU,EAAO,OAAS,IAAKd,EAAKgB,OACzC,yBAAKZ,UAAU,aACb,0BAAMA,UAAU,qBACd,kBAAC,IAAD,CAAQa,QAASL,KAGnB,0BAAMR,UAAU,oBACd,kBAAC,IAAD,CACEa,QAASN,EACTP,UAAU,kBAId,0BAAMA,UAAU,qBACd,kBAAC,IAAD,CAAQa,QAAS,kBAAMF,GAASD,SCtB3B,SAASI,EAAT,GAKX,IAJFC,EAIC,EAJDA,KACAC,EAGC,EAHDA,UACAT,EAEC,EAFDA,aACAC,EACC,EADDA,WAEA,OACE,wBAAIR,UAAU,mBACZ,wBAAIA,UAAU,+BAAd,aACCe,EAAKE,KAAI,SAACrB,GACT,OACE,kBAACU,EAAD,CACEC,aAAc,kBAAMA,EAAaX,EAAKsB,KACtCV,WAAY,kBAAMA,EAAWZ,EAAKsB,KAClCC,IAAKvB,EAAKsB,GACVtB,KAAMA,OAKZ,4BACEiB,QAASG,EACTd,KAAK,SACLF,UAAU,iDAET,IALH,e,kBC6CSoB,MA9Df,WAAgB,IAAD,EACaX,mBAAS,IADtB,mBACNY,EADM,KACCC,EADD,OAEWb,mBAAS,IAFpB,mBAENM,EAFM,KAEAQ,EAFA,KAuCb,OARAC,qBAAU,WACR,IAAMC,EAAaC,KAAKC,MAAMC,aAAaC,QA7BnB,gBA8BpBJ,GAAYF,EAAQE,KACvB,IACHD,qBAAU,WACRI,aAAaE,QAjCW,cAiCgBJ,KAAKK,UAAUhB,MACtD,CAACA,IAGF,yBAAKf,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,gCACb,wBAAIA,UAAU,+BAAd,gBACA,kBAACL,EAAD,CACEC,KAAMyB,EACNxB,aAzCW,SAACmC,GACpBV,EAASU,EAAEC,OAAO5B,QAyCVP,aAvCW,SAACkC,GACpBA,EAAEE,iBACGb,EAAMc,SACXZ,EAAQ,GAAD,mBAAKR,GAAL,CAAW,CAAEG,GAAIkB,cAAUxB,MAAOS,EAAOtB,UAAU,MAC1DuB,EAAS,MAoCDvB,SAAUgB,EAAKhB,WAEjB,kBAACe,EAAD,CACEC,KAAMA,EACNC,UAtCQ,WAChBO,EAAQ,KAsCAhB,aApCW,SAACW,GACpB,IACMmB,EADY,YAAOtB,GACQuB,QAAO,SAAC1C,GAAD,OAAUA,EAAKsB,KAAOA,KAC9DK,EAAQc,IAkCA7B,WAhCS,SAACU,GAClB,IACMmB,EADY,YAAOtB,GACQuB,QAAO,SAAC1C,GAAD,OAAUA,EAAKsB,KAAOA,KACxDqB,EAAexB,EAAKyB,MAAK,SAAC5C,GAAD,OAAUA,EAAKsB,KAAOA,KACrDqB,EAAaxC,UAAW,EAExBuB,EAASiB,EAAa3B,OACtBW,EAAQc,UCvBQI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.28358800.chunk.js","sourcesContent":["import React from 'react'\nimport {FcTodoList} from 'react-icons/fc'\n\nexport default function TodoInput ({item,handelChange,handleSubmit, editItem}) {\n\n        return (\n            <div className=\"card card-body my-3\">\n                <form onSubmit={handleSubmit} >\n                  <div className=\"input-group\">\n                    <div className=\"input-group-prepend\">\n                        <div className=\"input-group-text bg-red text-white\">\n                            <FcTodoList/>\n                        </div>\n                     </div>\n                    <input type=\"text\" className=\"form-control\"\n                    placeholder=\"Add Todo Item\" onChange={handelChange} value= {item}  />\n                 </div>\n                   <button type=\"submit\" className=\"btn btn-block btn-primary mt-3\">\n                         {editItem ? \"Edit item\" : \"Add item\"}</button>\n               </form>\n            </div>\n        )\n    }\n\n","import React, { useState } from \"react\";\nimport { FaEdit } from \"react-icons/fa\";\nimport { FaTrashAlt } from \"react-icons/fa\";\nimport { MdDone } from \"react-icons/md\";\nimport \"../index.css\";\n\nexport default function TodoItem({ item, handelDelete, handelEdit }) {\n  const [done, setDone] = useState(false);\n\n  return (\n    <li className=\"list-group-item text-capitalize d-flex justify-content-between my-2\">\n      <h6 className={done ? \"done\" : \"\"}>{item.title}</h6>\n      <div className=\"todo-icon\">\n        <span className=\"mx-2 text-success\">\n          <FaEdit onClick={handelEdit}></FaEdit>\n        </span>\n\n        <span className=\"mx-2 text-danger\">\n          <FaTrashAlt\n            onClick={handelDelete}\n            className=\"fas fa-trash\"\n          ></FaTrashAlt>\n        </span>\n\n        <span className=\"mx-2 text-success\">\n          <MdDone onClick={() => setDone(!done)}></MdDone>\n        </span>\n      </div>\n    </li>\n  );\n}\n","import React from \"react\";\nimport TodoItem from \"./TodoItem\";\n\nexport default function TodoList({\n  list,\n  clearList,\n  handelDelete,\n  handelEdit,\n}) {\n  return (\n    <ul className=\"list-group my-5\">\n      <h3 className=\"text-capitalize text-center\">todo list</h3>\n      {list.map((item) => {\n        return (\n          <TodoItem\n            handelDelete={() => handelDelete(item.id)}\n            handelEdit={() => handelEdit(item.id)}\n            key={item.id}\n            item={item}\n          />\n        );\n      })}\n\n      <button\n        onClick={clearList}\n        type=\"button\"\n        className=\"btn btn-danger btn-block text-capitalize mt-5\"\n      >\n        {\" \"}\n        clear list\n      </button>\n    </ul>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport TodoInput from \"./component/TodoInput\";\nimport TodoList from \"./component/TodoList\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nfunction App() {\n  const [state, setState] = useState(\"\");\n  const [list, setList] = useState([]);\n  const LOCAL_STORAGE_KEY = \"whateverman\";\n\n  const handelChange = (e) => {\n    setState(e.target.value);\n  };\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (!state.trim()) return;\n    setList([...list, { id: uuidv4(), title: state, editItem: false }]);\n    setState(\"\");\n  };\n  const clearList = () => {\n    setList([]);\n  };\n  const handelDelete = (id) => {\n    const filtredItems = [...list];\n    const updatedList = filtredItems.filter((item) => item.id !== id);\n    setList(updatedList);\n  };\n  const handelEdit = (id) => {\n    const filtredItems = [...list];\n    const updatedList = filtredItems.filter((item) => item.id !== id);\n    const selectedItem = list.find((item) => item.id === id);\n    selectedItem.editItem = true;\n    // selectedItem.id =id;\n    setState(selectedItem.title);\n    setList(updatedList);\n  };\n  useEffect(() => {\n    const storedItem = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY));\n    if (storedItem) setList(storedItem);\n  }, []);\n  useEffect(() => {\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(list));\n  }, [list]);\n\n  return (\n    <div className=\"container\">\n      <div className=\"row\">\n        <div className=\"col-10 mx-auto col-md-8 mt-4\">\n          <h3 className=\"text-capitalize text-center\"> todo Input </h3>\n          <TodoInput\n            item={state}\n            handelChange={handelChange}\n            handleSubmit={handleSubmit}\n            editItem={list.editItem}\n          />\n          <TodoList\n            list={list}\n            clearList={clearList}\n            handelDelete={handelDelete}\n            handelEdit={handelEdit}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}